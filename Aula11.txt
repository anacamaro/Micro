1. Defina a função void Atraso(volatile unsigned int x); que fornece um atraso de 'x' milissegundos. Utilize o Timer_A para a contagem de tempo, e assuma que o SMCLK já foi configurado para funcionar a 1 MHz. Esta função poderá ser utilizada diretamente nas outras questões desta prova.

void atraso(volatile unsigned int x)
{
  TACCR0 = 1000-1;
  TACTL |= TACLR;
  TACTL = TASSEL_2 + ID_0 + MC_1;
  while(x>0)
  {
    x--;
    while((TACTL & TAIFG) == 0);
    TACTL &=~TAIFG;
  }
  TACTL = MC_0;
}

2. Pisque os LEDs da Launchpad numa frequência de 100 Hz.

#include<msp430g2553.h>

void atraso(volatile unsigned int x)
{
  TACCR0 = 1000-1;
  TACTL |= TACLR;
  TACTL = TASSEL_2 + ID_0 + MC_1;
  while(x>0)
  {
    x--;
    while((TACTL & TAIFG) == 0);
    TACTL &=~TAIFG;
  }
  TACTL = MC_0;
}

void main(void)
  {
    volatile int i, x;
    WDTCTL = WDTPW + WDTHOLD;
    P1DIR = BIT6 + BIT0;
    P1OUT = BIT6 + BIT0;
    x = 10;    //100 Hz ou 10 milisegundos de delay entre uma piscada e outra
    while(1)
    {
        P1OUT ^= BIT6 + BIT0;
        atraso(x);
    }
  }


3. Pisque os LEDs da Launchpad numa frequência de 20 Hz.

#include<msp430g2553.h>

void atraso(volatile unsigned int x)
{
  TACCR0 = 1000-1;
  TACTL |= TACLR;
  TACTL = TASSEL_2 + ID_0 + MC_1;
  while(x>0)
  {
    x--;
    while((TACTL & TAIFG) == 0);
    TACTL &=~TAIFG;
  }
  TACTL = MC_0;
}

void main(void)
  {
    volatile int i, x;
    WDTCTL = WDTPW + WDTHOLD;
    P1DIR = BIT6 + BIT0;
    P1OUT = BIT6 + BIT0;
    x = 50;    //20 Hz ou 50 milisegundos de delay entre uma piscada e outra
    while(1)
    {
        P1OUT ^= BIT6 + BIT0;
        atraso(x);
    }
  }

4. Pisque os LEDs da Launchpad numa frequência de 1 Hz.

#include<msp430g2553.h>

void atraso(volatile unsigned int x)
{
  TACCR0 = 1000-1;
  TACTL |= TACLR;
  TACTL = TASSEL_2 + ID_0 + MC_1;
  while(x>0)
  {
    x--;
    while((TACTL & TAIFG) == 0);
    TACTL &=~TAIFG;
  }
  TACTL = MC_0;
}

void main(void)
  {
    volatile int i, x;
    WDTCTL = WDTPW + WDTHOLD;
    P1DIR = BIT6 + BIT0;
    P1OUT = BIT6 + BIT0;
    x = 1000;    //1 Hz ou 1000 milisegundos de delay entre uma piscada e outra
    while(1)
    {
        P1OUT ^= BIT6 + BIT0;
        atraso(x);
    }
  }

5. Pisque os LEDs da Launchpad numa frequência de 0,5 Hz.

#include<msp430g2553.h>

void atraso(volatile unsigned int x)
{
  TACCR0 = 1000-1;
  TACTL |= TACLR;
  TACTL = TASSEL_2 + ID_0 + MC_1;
  while(x>0)
  {
    x--;
    while((TACTL & TAIFG) == 0);
    TACTL &=~TAIFG;
  }
  TACTL = MC_0;
}

void main(void)
  {
    volatile int i, x;
    WDTCTL = WDTPW + WDTHOLD;
    P1DIR = BIT6 + BIT0;
    P1OUT = BIT6 + BIT0;
    x = 2000;    //0,5 Hz ou 2000 milisegundos de delay entre uma piscada e outra
    while(1)
    {
        P1OUT ^= BIT6 + BIT0;
        atraso(x);
    }
  }

6. Repita as questões 2 a 5 usando a interrupção do Timer A para acender ou apagar os LEDs.


  2-
  
  #include "msp430g2231.h"   

void main(void)
{
  WDTCTL = WDTPW + WDTHOLD;       
  CCTL0 = CCIE;                            
  TACTL = TASSEL_2 + MC_1 + ID_3;          
  CCR0 =  1;                       
  P1OUT &= 0x00;               
  P1DIR &= 0x00;               
  P1DIR |= BIT0 + BIT6;            
  _BIS_SR(CPUOFF + GIE);           
  while(1)                                                                                
  {}
} 
#pragma vector=TIMERA0_VECTOR 
__interrupt void Timer_A (void) 
{   
   long int i;
   long int x;
   x = 650; //65*10
   for(i=0;i<x;i++);
   P1OUT ^= BIT0 + BIT6;                                                                                 
}
  
  3-
  
  #include "msp430g2231.h"   

void main(void)
{
  WDTCTL = WDTPW + WDTHOLD;       
  CCTL0 = CCIE;                            
  TACTL = TASSEL_2 + MC_1 + ID_3;          
  CCR0 =  1;                       
  P1OUT &= 0x00;               
  P1DIR &= 0x00;               
  P1DIR |= BIT0 + BIT6;            
  _BIS_SR(CPUOFF + GIE);           
  while(1)                                                                                
  {}
} 
#pragma vector=TIMERA0_VECTOR 
__interrupt void Timer_A (void) 
{   
   long int i;
   long int x;
   x = 3250; //65*50
   for(i=0;i<x;i++);
   P1OUT ^= BIT0 + BIT6;                                                                                 
}
  
  
  4-
  
  #include "msp430g2231.h"   

void main(void)
{
  WDTCTL = WDTPW + WDTHOLD;       
  CCTL0 = CCIE;                            
  TACTL = TASSEL_2 + MC_1 + ID_3;          
  CCR0 =  1;                       
  P1OUT &= 0x00;               
  P1DIR &= 0x00;               
  P1DIR |= BIT0 + BIT6;            
  _BIS_SR(CPUOFF + GIE);           
  while(1)                                                                                
  {}
} 
#pragma vector=TIMERA0_VECTOR 
__interrupt void Timer_A (void) 
{   
   long int i;
   long int x;
   x = 65000; //65*1000
   for(i=0;i<x;i++);
   P1OUT ^= BIT0 + BIT6;                                                                                 
}

5-

#include "msp430g2231.h"   

void main(void)
{
  WDTCTL = WDTPW + WDTHOLD;       
  CCTL0 = CCIE;                            
  TACTL = TASSEL_2 + MC_1 + ID_3;          
  CCR0 =  1;                       
  P1OUT &= 0x00;               
  P1DIR &= 0x00;               
  P1DIR |= BIT0 + BIT6;            
  _BIS_SR(CPUOFF + GIE);           
  while(1)                                                                                
  {}
} 
#pragma vector=TIMERA0_VECTOR 
__interrupt void Timer_A (void) 
{   
   long int i;
   long int x;
   x = 130000; //65*2000
   for(i=0;i<x;i++);
   P1OUT ^= BIT0 + BIT6;                                                                                 
}

7. Defina a função void paralelo_para_serial(void); que lê o byte de entrada via porta P1 e transmite os bits serialmente via pino P2.0. Comece com um bit em nivel alto, depois os bits na ordem P1.0 - P1.1 - … - P1.7 e termine com um bit em nível baixo. Considere um período de 1 ms entre os bits.

#include<msp430g2553.h>

void atraso(volatile unsigned int x)
{
  TACCR0 = 1000-1;
  TACTL |= TACLR;
  TACTL = TASSEL_2 + ID_0 + MC_1;
  while(x>0)
  {
    x--;
    while((TACTL & TAIFG) == 0);
    TACTL &=~TAIFG;
  }
  TACTL = MC_0;
}


void paralelo_para_serial()
{
  int a0, a1, a2, a3, a4, a5, a6, a7;
  int s[9];
  volatile unsigned int x;
  int i;
  x = 1;
  if(a0 & P1IN)
  {
    s[1] = a0; 
  }
  if(a1 & P1IN)
  {
    s[2] = a1; 
  }
  if(a2 & P1IN)
  {
    s[3] = a2; 
  }
  if(a3 & P1IN)
  {
    s[4] = a3; 
  }
  if(a4 & P1IN)
  {
    s[5] = a4; 
  }
  if(a5 & P1IN)
  {
    s[6] = a5; 
  }
  if(a6 & P1IN)
  {
    s[7] = a6; 
  }
  if(a7 & P1IN)
  {
    s[8] = a7; 
  }
  s[0] = 1;
  s[9] = 0;
  for(i=0;i<=9;i++)
  {
    P2OUT = s[i];
    atraso(x);
  }
}




void main(void)
  {
    WDTCTL = WDTPW + WDTHOLD;
    P1DIR = BIT6 + BIT0;
    P1OUT = BIT6 + BIT0;
    while(1)
    {
        paralelo_para_serial();
    }
  }


8. Faça o programa completo que lê um byte de entrada serialmente via pino P2.0 e transmite este byte via porta P1. O sinal serial começa com um bit em nivel alto, depois os bits na ordem 0-7 e termina com um bit em nível baixo. Os pinos P1.0-P1.7 deverão corresponder aos bits 0-7, respectivamente. Considere um período de 1 ms entre os bits.

#include<msp430g2553.h>

void atraso(volatile unsigned int x)
{
  TACCR0 = 1000-1;
  TACTL |= TACLR;
  TACTL = TASSEL_2 + ID_0 + MC_1;
  while(x>0)
  {
    x--;
    while((TACTL & TAIFG) == 0);
    TACTL &=~TAIFG;
  }
  TACTL = MC_0;
}





void main(void)
  {
    volatile unsigned int x;
    WDTCTL = WDTPW + WDTHOLD;
    x = 1;
    while(1)
    {
      if (BIT0 & P2IN)
      {
        P1OUT = (P2IN + 1) + BIT0;
        atraso(x);
        P1OUT = (P2IN + 3) + BIT1;
        atraso(x);
        P1OUT = (P2IN + 7) + BIT2;
        atraso(x);
        P1OUT = (P2IN + 15) + BIT3;
        atraso(x);
        P1OUT = (P2IN + 31) + BIT4;
        atraso(x);
        P1OUT = (P2IN + 63) + BIT5;
        atraso(x);
        P1OUT = (P2IN + 127) + BIT6;
        atraso(x);
        P1OUT = (P2IN + 255) + BIT7;
        atraso(x);
      }
    }
    
  }
9. Defina a função void ConfigPWM(volatile unsigned int freqs, volatile unsigned char ciclo_de_trabalho); para configurar e ligar o Timer_A em modo de comparação. Considere que o pino P1.6 já foi anteriormente configurado como saída do canal 1 de comparação do Timer_A, que somente os valores {100, 200, 300, …, 1000} Hz são válidos para a frequência, que somente os valores {0, 25, 50, 75, 100} % são válidos para o ciclo de trabalho, e que o sinal de clock SMCLK do MSP430 está operando a 1 MHz.

void ConfigPWM(volatile unsigned int freqs,volatile unsigned char ciclo_de_trabalho)
{
  volatile unsigned int x, y;
  x = 1000/freqs;
  y = x/4;
  if(ciclo_de_trabalho == '0')
  {
    P1OUT = 0;
  }
  if(ciclo_de_trabalho == '25')
  {
    P1OUT = BIT6;
    atraso(y);
    P1OUT = 0;
    atraso(3*y);
  }
  if(ciclo_de_trabalho == '50')
  {
    P1OUT = BIT6;
    atraso(2*y);
    P1OUT = 0;
    atraso(2*y);
  }
  if(ciclo_de_trabalho == '75')
  {
    P1OUT = BIT6;
    atraso(3*y);
    P1OUT = 0;
    atraso(y);
  }
  if(ciclo_de_trabalho == '100')
  {
    P1OUT = BIT6;
  }
}